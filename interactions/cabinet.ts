import Discord, {
    ColorResolvable,
    MessageEmbed,
    TextInputComponent,
    MessageActionRow,
    Modal, TextChannel, MessageButton
} from "discord.js";
import { SPWorlds } from "spworlds";
import CardsConfig from '../configurations/cards.json';
import AppearanceConfig from '../configurations/appearance.json'
import ChannelsConfig from '../configurations/channels.json'
import mcdata from "mcdata";
import {DBRequest, HTTPRequest} from "../database";
import {withdrawBalance} from "../bank_handling";

const bankCard = new SPWorlds(CardsConfig.CARD_ID, CardsConfig.CARD_TOKEN);

export = {
    async execute (client: Discord.Client, interaction: Discord.Interaction): Promise<void> {
        const username = await bankCard.findUser(interaction.user.id);
        const minecraftUser = await mcdata.playerStatus(username, { renderSize: 2 })

        if (interaction.isButton()) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –õ–ö
            if (interaction.customId === 'lk') {
                const count = await DBRequest(`SELECT count(id) as count FROM \`users\` WHERE uuid='${minecraftUser.uuid}'`)

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç => –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                if((count as any[])[0].count === 0) {
                    const modal = new Modal()
                        .setCustomId('registration_modal')
                        .setTitle('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')

                    const cardnumber = new TextInputComponent()
                        .setCustomId('registration_cardnumber')
                        .setLabel("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å spworlds.ru")
                        .setStyle('SHORT')
                        .setRequired(true)
                        .setMinLength(5)
                        .setMaxLength(5)

                    const referal = new TextInputComponent()
                        .setCustomId('registration_referal')
                        .setLabel("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å")
                        .setStyle('SHORT')
                        .setPlaceholder("–ù–∞–ø—Ä–∏–º–µ—Ä: Spagetik")
                        .setRequired(false)


                    const firstActionRow = new MessageActionRow().addComponents(cardnumber);
                    const secondActionRow = new MessageActionRow().addComponents(referal);
                    modal.addComponents(firstActionRow as any, secondActionRow as any);
                    await interaction.showModal(modal);
                } else {
                    const response = await DBRequest(`SELECT * FROM \`users\` WHERE \`minecraft_username\` = '${username}'`)
                    const bank_account = (response as any[])[0]

                    const row = new MessageActionRow()
                        .addComponents(
                            new MessageButton()
                                .setCustomId('topup')
                                .setLabel('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç')
                                .setStyle('SUCCESS'),
                            new MessageButton()
                                .setCustomId('withdraw')
                                .setLabel('–°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞')
                                .setStyle('DANGER'),
                            new MessageButton()
                                .setCustomId('history')
                                .setLabel('–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π')
                                .setStyle('PRIMARY'),
                            new MessageButton()
                                .setCustomId('settings')
                                .setLabel('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
                                .setStyle('SECONDARY'),
                        );

                    const embed = new MessageEmbed()
                        .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                        .setTitle('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
                        .setDescription('–ö–∞–±–∏–Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ì–¢–ö')
                        .setThumbnail(minecraftUser.skin.avatar)
                        .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                        .addFields(
                            { name: '–ù–∏–∫–Ω–µ–π–º', value: `\`${bank_account.minecraft_username}\``, inline: true },
                            { name: '–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞', value: `\`${bank_account.balance}\` <:diamond_ore:990969911671136336>`, inline: true },
                            { name: '–ö–∞—Ä—Ç–∞ spworlds.ru', value: `\`${bank_account.card_number}\` üí≥`, inline: true },
                        )
                    await interaction.reply({ ephemeral: true, embeds: [embed], components: [row] });
                }

            }

            // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ (–≤—ã–∑–æ–≤ —Ñ–æ—Ä–º—ã)
            if (interaction.customId === 'topup') {
                const modal = new Modal()
                    .setCustomId('topup_modal')
                    .setTitle('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞')

                const value = new TextInputComponent()
                    .setCustomId('topup_value')
                    .setLabel("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–ê–†)")
                    .setStyle('SHORT')
                    .setRequired(true)
                    .setMinLength(1)
                    .setMaxLength(6)

                const firstActionRow = new MessageActionRow().addComponents(value);
                modal.addComponents(firstActionRow as any);
                await interaction.showModal(modal);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            if (interaction.customId === 'history') {
                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('transfer_history')
                            .setLabel('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫')
                            .setStyle('SECONDARY'),
                        new MessageButton()
                            .setCustomId('topup_history')
                            .setLabel('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π')
                            .setStyle('SECONDARY'),
                        new MessageButton()
                            .setCustomId('withdraw_history')
                            .setLabel('–ò—Å—Ç–æ—Ä–∏—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤')
                            .setStyle('SECONDARY')
                    );

                await interaction.reply({ ephemeral: true, components: [row] })
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if (interaction.customId === 'settings') {
                const response = await DBRequest(`SELECT * FROM users WHERE minecraft_username = '${username}'`) as any[]
                const embed = new MessageEmbed()
                    .setTitle(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ${username}`)
                    .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                    .setFooter(AppearanceConfig.Tags.GTK, AppearanceConfig.Images.MainLogo)
                    .addField("–ö–∞—Ä—Ç–∞:", `${response[0].card_number} üí≥`)
                    .addField("–†–µ—Ñ–µ—Ä–∞–ª:", response[0].referal ? response[0].referal : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    .addField("–ê–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", response[0].address ? response[0].address : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('cardnumber-settings')
                            .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã')
                            .setStyle('SECONDARY'),
                        new MessageButton()
                            .setCustomId('referal-settings')
                            .setLabel('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
                            .setStyle('SECONDARY'),
                        new MessageButton()
                            .setCustomId('address-settings')
                            .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
                            .setStyle('SECONDARY')
                    );

                await interaction.reply({ ephemeral: true, embeds: [embed], components: [row] })
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤—ã–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–µ)
            if (interaction.customId.endsWith('_settings')) {
                const response = await DBRequest(`SELECT * FROM users WHERE minecraft_username = '${username}'`) as any[]
                const modal = new Modal()
                switch (interaction.customId) {
                    case 'cardnumber-settings': {
                        modal.setCustomId('cardnumber_settings_modal')
                        modal.setTitle('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
                        const value = new TextInputComponent()
                            .setCustomId('value')
                            .setLabel('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã')
                            .setMinLength(5)
                            .setMaxLength(5)
                            .setPlaceholder(`–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: ${response[0].card_number}`)
                            .setRequired(true)
                            .setStyle('SHORT')
                        const firstActionRow = new MessageActionRow().addComponents(value);
                        modal.addComponents(firstActionRow as any)
                        break
                    }

                    case 'referal-settings': {
                        if (response[0].referal) {
                            const embed = new MessageEmbed()
                                .setTitle("–í—ã —É–∂–µ –≤–≤–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª")
                                .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                                .setFooter(AppearanceConfig.Tags.GTK, AppearanceConfig.Images.MainLogo)

                            // @ts-ignore
                            await interaction.reply({ephermal: true, embeds: [embed]})
                            return
                        }
                        modal.setCustomId('referal_settings_modal')
                        modal.setTitle('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
                        const value = new TextInputComponent()
                            .setCustomId('value')
                            .setLabel('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª')
                            .setPlaceholder(`–†–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å`)
                            .setRequired(true)
                            .setStyle('SHORT')
                        const firstActionRow = new MessageActionRow().addComponents(value);
                        modal.addComponents(firstActionRow as any)
                        break
                    }

                    case 'address-settings': {
                        modal.setCustomId('address_settings_modal')
                        modal.setTitle('–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
                        const value = new TextInputComponent()
                            .setCustomId('value')
                            .setLabel('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
                            .setRequired(true)
                            .setStyle('PARAGRAPH')
                        const firstActionRow = new MessageActionRow().addComponents(value);
                        modal.addComponents(firstActionRow as any)
                        break
                    }
                }
                await interaction.showModal(modal);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–π (–≤—ã–±–æ—Ä –ø–æ –∫–Ω–æ–ø–∫–µ)
            if (interaction.customId.endsWith('_history')) {
                const embed = new MessageEmbed()
                    .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                    .setThumbnail(minecraftUser.skin.avatar)
                    .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                const users = await DBRequest(`SELECT * FROM users WHERE uuid = '${minecraftUser.uuid}'`) as any[]
                switch (interaction.customId) {
                    case 'transfer_history':
                        const transferHistory = await DBRequest(`SELECT * FROM transfer_history WHERE userid = ${users[0].id}`) as any[]
                        let transferLog = ""
                        for (const responseElement of transferHistory) {
                            transferLog += `**${responseElement.date}** | **${responseElement.value}**  <:diamond_ore:990969911671136336> | **${responseElement.reason}**\n\n`
                        }
                        embed.setTitle("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
                        embed.setDescription(transferLog)
                        break
                    case 'withdraw_history':
                        const withdrawHistory = await DBRequest(`SELECT * FROM withdraw_history WHERE userid = ${users[0].id}`) as any[]
                        let withdrawLog = ""
                        for (const responseElement of withdrawHistory) {
                            withdrawLog += `**${responseElement.date}** | **${responseElement.value}**  <:diamond_ore:990969911671136336>\n\n`
                        }
                        embed.setTitle("–ò—Å—Ç–æ—Ä–∏—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤")
                        embed.setDescription(withdrawLog)
                        break
                    case 'topup_history':
                        const topupHistory = await DBRequest(`SELECT * FROM topup_history WHERE userid = ${users[0].id}`) as any[]
                        let topupLog = ""
                        for (const responseElement of topupHistory) {
                            topupLog += `**${responseElement.date}** | **${responseElement.value}**  <:diamond_ore:990969911671136336>\n\n`
                        }
                        embed.setTitle("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π")
                        embed.setDescription(topupLog)
                        break
                }
                interaction.message.embeds.splice(1, 0, embed)
                await interaction.update({ embeds: [embed] })
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
            if (interaction.customId === 'takecredit') {
                const modal = new Modal()
                    .setCustomId('takecredit_modal')
                    .setTitle('–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ')

                const value = new TextInputComponent()
                    .setCustomId('takecredit_value')
                    .setLabel("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è (–ê–†)")
                    .setStyle('SHORT')
                    .setRequired(true)
                    .setMinLength(1)
                    .setMaxLength(6)

                const time = new TextInputComponent()
                    .setCustomId('takecredit_time')
                    .setLabel("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –∫—Ä–µ–¥–∏—Ç–∞ (–¥–Ω–µ–π)")
                    .setStyle('SHORT')
                    .setRequired(true)
                    .setMinLength(1)
                    .setMaxLength(3)

                const target = new TextInputComponent()
                    .setCustomId('takecredit_target')
                    .setLabel("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è")
                    .setStyle('PARAGRAPH')
                    .setRequired(true)

                const firstActionRow = new MessageActionRow().addComponents(value);
                const secondActionRow = new MessageActionRow().addComponents(time);
                const thirdActionRow = new MessageActionRow().addComponents(target);
                modal.addComponents(firstActionRow as any, secondActionRow as any, thirdActionRow as any);
                await interaction.showModal(modal);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω—è—Ç–∏–µ —Å–æ —Å—á–µ—Ç–∞
            if (interaction.customId === 'withdraw') {
                const username = await bankCard.findUser(interaction.user.id);
                const response = await DBRequest(`SELECT * FROM \`users\` WHERE \`minecraft_username\` = '${username}'`) as any[]
                const modal = new Modal()
                    .setCustomId('withdraw_modal')
                    .setTitle(`–°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ (–ë–∞–ª–∞–Ω—Å: ${response[0].balance} –ê–†)`)

                const value = new TextInputComponent()
                    .setCustomId('withdraw_value')
                    .setLabel(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤ (–ê–†)`)
                    .setStyle('SHORT')
                    .setRequired(true)
                    .setPlaceholder(`–ë–∞–ª–∞–Ω—Å: ${response[0].balance} –ê–†`)
                    .setMinLength(1)
                    .setMaxLength(6)

                const cardNumber = new TextInputComponent()
                    .setCustomId('card_number')
                    .setLabel(`–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—Ç—É SPWorlds –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤`)
                    .setStyle('SHORT')
                    .setRequired(false)
                    .setPlaceholder(`–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${response[0].card_number}`)
                    .setMinLength(5)
                    .setMaxLength(5)

                const firstActionRow = new MessageActionRow().addComponents(value);
                const secondActionRow = new MessageActionRow().addComponents(cardNumber);
                modal.addComponents(firstActionRow as any, secondActionRow as any);
                await interaction.showModal(modal);
            }
        }

        if (interaction.isModalSubmit()) {
            // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if (interaction.customId === 'registration_modal') {
                const cardnumber = interaction.fields.getTextInputValue('registration_cardnumber')
                const referal = interaction.fields.getTextInputValue('registration_referal') ? interaction.fields.getTextInputValue('registration_referal') : null
                await DBRequest(`INSERT INTO \`users\` (\`uuid\`, \`minecraft_username\`, \`card_number\`, referal) VALUES ('${minecraftUser.uuid}', '${username}', '${cardnumber}', '${referal}')`)
                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('lk')
                            .setLabel('üë®‚Äçüíº –í–æ–π—Ç–∏ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
                            .setStyle('PRIMARY')
                    )

                const embed = new MessageEmbed()
                    .setColor(AppearanceConfig.Colors.Success as ColorResolvable)
                    .setTitle(`–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`)
                    .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                    .setDescription("–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
                await interaction.reply({ ephemeral: true, embeds: [embed], components: [row] });
            }

            // –§–æ—Ä–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
            if (interaction.customId === 'topup_modal') {
                const value = interaction.fields.getTextInputValue('topup_value')
                const username = await bankCard.findUser(interaction.user.id);
                const options = {
                    'method': 'POST',
                    'url': 'https://spworlds.ru/api/public/payment',
                    'headers': {
                        'Authorization': `Bearer ${CardsConfig.CARD_BASE64}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        "amount": parseInt(value),
                        "redirectUrl": "https://gtk-sp.ru/payment/success",
                        "webhookUrl": "https://gtk-sp.ru/payment/callback",
                        "data": interaction.user.id
                    })

                };
                const response = await HTTPRequest(options)
                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setLabel('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç')
                            .setStyle('LINK')
                            .setURL(JSON.parse(response as string).url)
                    )

                const embed1 = new MessageEmbed()
                    .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                    .setTitle(`–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ ${value} –ê–†`)
                    .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                    .setFields(
                        { name: '–ù–∏–∫–Ω–µ–π–º', value: `\`${username}\``, inline: true },
                        { name: '–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', value: `\`${value}\` <:diamond_ore:990969911671136336>`, inline: true },
                    )
                const embed2 = new MessageEmbed()
                    .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                    .setTitle(`–†–∞–∑—Ä–µ—à–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`)
                    .setDescription(`–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å <@${client.user.id}> –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –∏—Ö –¥–æ —ç—Ç–æ–≥–æ.\n–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏—è—Ö, –≤–∫–ª–∞–¥–∞—Ö –∏ –¥–æ—Å—Ç–∞–≤–∫–µ.`)
                    .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                await interaction.reply({ ephemeral: true, embeds: [embed1, embed2], components: [row] });
            }

            // –§–æ—Ä–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è
            if (interaction.customId === 'takecredit_modal') {
                const value = interaction.fields.getTextInputValue('takecredit_value')
                const time = interaction.fields.getTextInputValue('takecredit_time')
                const target = interaction.fields.getTextInputValue('takecredit_target')
                const username = await bankCard.findUser(interaction.user.id);
                const minecraftUser = await mcdata.playerStatus(username, { renderSize: 2 })
                const notifyEmbed = new MessageEmbed()
                    .setColor(AppearanceConfig.Colors.Success as ColorResolvable)
                    .setTitle(`–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`)
                    .setThumbnail(minecraftUser.skin.avatar)
                    .setDescription("–ó–∞—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è.")
                    .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                    .setFields(
                        { name: '–ù–∏–∫–Ω–µ–π–º', value: `\`${username}\`` },
                        { name: '–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è', value: `\`${value}\` <:diamond_ore:990969911671136336>` },
                        { name: '–í—Ä–µ–º—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è', value: `${time} –¥–Ω–µ–π` },
                        { name: '–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è', value: target },
                        { name: '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞', value: "–ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ë–∞–Ω–∫–∞." },
                    )
                await interaction.reply({ ephemeral: true, embeds: [notifyEmbed] });


                const requestEmbed = new MessageEmbed()
                    .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                    .setTitle(`–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ`)
                    .setThumbnail(minecraftUser.skin.avatar)
                    .setTimestamp()
                    .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                    .setFields(
                        { name: '–ù–∏–∫–Ω–µ–π–º', value: `\`${username}\`` },
                        { name: '–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è', value: `\`${value}\` <:diamond_ore:990969911671136336>` },
                        { name: '–í—Ä–µ–º—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è', value: `${time} –¥–Ω–µ–π` },
                        { name: '–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è', value: target },
                        { name: '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞', value: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞" },
                    )

                await ( client.channels.cache.get(ChannelsConfig.CREDITS_APPLICATIONS_CHANNEL) as TextChannel ).send({ embeds: [requestEmbed] });
            }

            // –§–æ—Ä–º–∞ —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤
            if (interaction.customId === 'withdraw_modal') {
                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('lk')
                            .setLabel('üë®‚Äçüíº –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
                            .setStyle('PRIMARY')
                    )

                const username = await bankCard.findUser(interaction.user.id);
                const value = parseInt(interaction.fields.getTextInputValue('withdraw_value'))
                const response = await DBRequest(`SELECT * FROM \`users\` WHERE \`minecraft_username\` = '${username}'`) as any[]
                const cardNumber = interaction.fields.getTextInputValue('card_number') ? interaction.fields.getTextInputValue('card_number') : response[0].card_number
                if (response[0].balance - value >= 0) {
                    await withdrawBalance(response[0].id, username, value, cardNumber)

                    const embed = new MessageEmbed()
                        .setColor(AppearanceConfig.Colors.Success as ColorResolvable)
                        .setTitle(`–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ (-${value} <:diamond_ore:990969911671136336>)`)
                        .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                        .addFields(
                            { name: '–°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è', value: `\`${value}\` <:diamond_ore:990969911671136336>`, inline: true },
                            { name: '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å', value: `\`${response[0].balance - value}\` <:diamond_ore:990969911671136336>`, inline: true },
                            { name: '–ö–∞—Ä—Ç–∞ spworlds.ru', value: `\`${cardNumber}\` üí≥`, inline: true },
                        )

                    await interaction.reply({ ephemeral: true, embeds: [embed], components: [row] });
                } else {
                    const embed = new MessageEmbed()
                        .setColor(AppearanceConfig.Colors.Error as ColorResolvable)
                        .setTitle(`–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è`)
                        .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                        .setDescription(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É \`${response[0].balance}\` <:diamond_ore:990969911671136336>`)
                    await interaction.reply({ ephemeral: true, embeds: [embed], components: [row] });
                }
            }

            // –§–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if (interaction.customId.endsWith('_settings_modal')) {
                const embed = new MessageEmbed()
                    .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                    .setFooter(AppearanceConfig.Tags.GTK, AppearanceConfig.Images.MainLogo)
                const value = interaction.fields.getTextInputValue('value')
                switch (interaction.customId) {
                    case 'cardnumber_settings_modal': {
                        await DBRequest(`UPDATE users SET card_number = ${parseInt(value)} WHERE minecraft_username = '${username}'`)
                        embed.setTitle("–ö–∞—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                        embed.addField('–ö–∞—Ä—Ç–∞:', `${value} üí≥`)
                        break
                    }
                    case 'referal_settings_modal': {
                        await DBRequest(`UPDATE users SET referal = '${value}' WHERE minecraft_username = '${username}'`)
                        embed.setTitle("–†–µ—Ñ–µ—Ä–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        embed.setDescription("–†–µ—Ñ–µ—Ä–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω")
                        embed.addField('–†–µ—Ñ–µ—Ä–∞–ª:', `${value}`)
                        break
                    }
                    case 'address_settings_modal': {
                        await DBRequest(`UPDATE users SET address = '${value}' WHERE minecraft_username = '${username}'`)
                        embed.setTitle("–ê–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω")
                        embed.addField('–ê–¥—Ä–µ—Å:', `${value}`)
                        break
                    }
                }
                await interaction.reply({ephemeral: true, embeds: [embed]})
            }



        }

    }
}
