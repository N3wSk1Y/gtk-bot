import Discord, {
    ColorResolvable,
    MessageEmbed,
    TextInputComponent,
    MessageActionRow,
    Modal, TextChannel, MessageButton
} from "discord.js";
import { SPWorlds } from "spworlds";
import CardsConfig from '../configurations/cards.json';
import AppearanceConfig from '../configurations/appearance.json'
import ChannelsConfig from '../configurations/channels.json'
import mcdata from "mcdata";
import {DBRequest, HTTPRequest} from "../database";

const sp = new SPWorlds(CardsConfig.CARD_ID, CardsConfig.CARD_TOKEN);

export = {
    async execute (client: Discord.Client, interaction: Discord.Interaction): Promise<void> {
        const username = await sp.findUser(interaction.user.id);
        const minecraftUser = await mcdata.playerStatus(username, { renderSize: 2 })

        if (interaction.isButton()) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –õ–ö
            if (interaction.customId === 'lk') {
                const count = await DBRequest(`SELECT count(id) as count FROM \`users\` WHERE uuid='${minecraftUser.uuid}'`)

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç => –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                if((count as any[])[0].count === 0) {
                    const modal = new Modal()
                        .setCustomId('registration_modal')
                        .setTitle('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')

                    const cardnumber = new TextInputComponent()
                        .setCustomId('registration_cardnumber')
                        .setLabel("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å spworlds.ru")
                        .setStyle('SHORT')
                        .setRequired(true)
                        .setMinLength(5)
                        .setMaxLength(5)

                    const firstActionRow = new MessageActionRow().addComponents(cardnumber);
                    modal.addComponents(firstActionRow as any);
                    await interaction.showModal(modal);
                } else {
                    const response = await DBRequest(`SELECT * FROM \`users\` WHERE \`minecraft_username\` = '${username}'`)
                    const bank_account = (response as any[])[0]

                    const row = new MessageActionRow()
                        .addComponents(
                            new MessageButton()
                                .setCustomId('topup')
                                .setLabel('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç')
                                .setStyle('SUCCESS'),
                            new MessageButton()
                                .setCustomId('withdraw')
                                .setLabel('–°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞')
                                .setStyle('DANGER'),
                            new MessageButton()
                                .setCustomId('takecredit')
                                .setLabel('–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç')
                                .setStyle('PRIMARY'),
                            new MessageButton()
                                .setCustomId('history')
                                .setLabel('–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π')
                                .setStyle('SECONDARY'),
                        );

                    const embed = new MessageEmbed()
                        .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                        .setTitle('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
                        .setDescription('–ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.')
                        .setThumbnail(minecraftUser.skin.avatar)
                        .setFooter(AppearanceConfig.Tags.GTK, AppearanceConfig.Images.MainLogo)
                        .addFields(
                            { name: '–ù–∏–∫–Ω–µ–π–º', value: `\`${bank_account.minecraft_username}\``, inline: true },
                            { name: '–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞', value: `\`${bank_account.balance}\` <:diamond_ore:990969911671136336>`, inline: true },
                            { name: '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', value: `\`${0}\` <:diamond_ore:990969911671136336>`, inline: true },
                            { name: '–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ', value: `\`${10}%\` –≥–æ–¥–æ–≤—ã—Ö.`, inline: true },
                            { name: '–ö–∞—Ä—Ç–∞ spworlds.ru', value: `\`${bank_account.card_number}\` üí≥`, inline: true },
                            { name: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã', value: `–ù–µ—Ç.`},
                        )
                    await interaction.reply({ ephemeral: true, embeds: [embed], components: [row] });
                }

            }

            // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ (–≤—ã–∑–æ–≤ —Ñ–æ—Ä–º—ã)
            if (interaction.customId === 'topup') {
                const modal = new Modal()
                    .setCustomId('topup_modal')
                    .setTitle('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞')

                const value = new TextInputComponent()
                    .setCustomId('topup_value')
                    .setLabel("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–ê–†)")
                    .setStyle('SHORT')
                    .setRequired(true)
                    .setMinLength(1)
                    .setMaxLength(6)

                const firstActionRow = new MessageActionRow().addComponents(value);
                modal.addComponents(firstActionRow as any);
                await interaction.showModal(modal);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            if (interaction.customId === 'history') {
                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('transfer_history')
                            .setLabel('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫')
                            .setStyle('SECONDARY'),
                        new MessageButton()
                            .setCustomId('topup_history')
                            .setLabel('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π')
                            .setStyle('SECONDARY')
                            .setDisabled(true),
                        new MessageButton()
                            .setCustomId('withdraw_history')
                            .setLabel('–ò—Å—Ç–æ—Ä–∏—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤')
                            .setStyle('SECONDARY')
                            .setDisabled(true),
                    );

                await interaction.update({ components: [row] })
            }

            if (interaction.customId.endsWith('_history')) {
                const embed = new MessageEmbed()
                    .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                    .setThumbnail(minecraftUser.skin.avatar)
                switch (interaction.customId) {
                    case 'transfer_history':
                        const users = await DBRequest(`SELECT * FROM users WHERE uuid = '${minecraftUser.uuid}'`) as any[]
                        const response = await DBRequest(`SELECT * FROM transfer_history WHERE userid = ${users[0].id}`) as any[]
                        let log = ""
                        for (const responseElement of response) {
                            log += `**${responseElement.date}** | **${responseElement.value}** | **${responseElement.reason}**\n\n`
                        }
                        embed.setTitle("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
                        embed.setDescription(log)
                        break
                    case 'withdraw_history':

                        break
                    case 'topup_history':

                        break
                }
                interaction.message.embeds.splice(1, 0, embed)
                await interaction.update({ embeds: [embed] })
            }
        }

        if (interaction.isModalSubmit()) {
            // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if (interaction.customId === 'registration_modal') {
                const cardnumber = interaction.fields.getTextInputValue('registration_cardnumber')
                await DBRequest(`INSERT INTO \`users\` (\`uuid\`, \`minecraft_username\`, \`card_number\`) VALUES ('${minecraftUser.uuid}', '${username}', '${cardnumber}')`)
                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('lk')
                            .setLabel('üë®‚Äçüíº –í–æ–π—Ç–∏ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
                            .setStyle('PRIMARY')
                    )

                const embed = new MessageEmbed()
                    .setColor(AppearanceConfig.Colors.Success as ColorResolvable)
                    .setTitle(`–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`)
                    .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                    .setDescription("–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
                await interaction.reply({ ephemeral: true, embeds: [embed], components: [row] });
            }

            // –§–æ—Ä–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
            if (interaction.customId === 'topup_modal') {
                const value = interaction.fields.getTextInputValue('topup_value')
                const username = await sp.findUser(interaction.user.id);
                const minecraftUser = await mcdata.playerStatus(username, { renderSize: 2 })
                const options = {
                    'method': 'POST',
                    'url': 'https://spworlds.ru/api/public/payment',
                    'headers': {
                        'Authorization': `Bearer ${CardsConfig.CARD_BASE64}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        "amount": parseInt(value),
                        "redirectUrl": "https://sp-credit.herokuapp.com/success",
                        "webhookUrl": "https://sp-credit.herokuapp.com/callback", // TODO: –ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                        "data": username
                    })

                };
                const response = await HTTPRequest(options)

                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setLabel('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç')
                            .setStyle('LINK')
                            .setURL(JSON.parse(response as string).url)
                    )

                const embed1 = new MessageEmbed()
                    .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                    .setTitle(`–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ ${value} –ê–†`)
                    .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                    .setFields(
                        { name: '–ù–∏–∫–Ω–µ–π–º', value: `\`${username}\``, inline: true },
                        { name: '–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', value: `\`${value}\` <:diamond_ore:990969911671136336>`, inline: true },
                    )
                const embed2 = new MessageEmbed()
                    .setColor(AppearanceConfig.Colors.Default as ColorResolvable)
                    .setTitle(`–†–∞–∑—Ä–µ—à–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`)
                    .setDescription(`–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å <@${client.user.id}> –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –∏—Ö –¥–æ —ç—Ç–æ–≥–æ.\n–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏—è—Ö, –≤–∫–ª–∞–¥–∞—Ö –∏ –¥–æ—Å—Ç–∞–≤–∫–µ.`)
                    .setFooter(AppearanceConfig.Tags.Bank, AppearanceConfig.Images.MainLogo)
                await interaction.reply({ ephemeral: true, embeds: [embed1, embed2], components: [row] });
            }
        }

    }
}
